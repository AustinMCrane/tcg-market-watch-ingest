// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package main is a generated GoMock package.
package main

import (
	reflect "reflect"

	tcgplayer "github.com/AustinMCrane/tcgplayer"
	gomock "github.com/golang/mock/gomock"
)

// MockTcgplayer is a mock of Tcgplayer interface.
type MockTcgplayer struct {
	ctrl     *gomock.Controller
	recorder *MockTcgplayerMockRecorder
}

// MockTcgplayerMockRecorder is the mock recorder for MockTcgplayer.
type MockTcgplayerMockRecorder struct {
	mock *MockTcgplayer
}

// NewMockTcgplayer creates a new mock instance.
func NewMockTcgplayer(ctrl *gomock.Controller) *MockTcgplayer {
	mock := &MockTcgplayer{ctrl: ctrl}
	mock.recorder = &MockTcgplayerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTcgplayer) EXPECT() *MockTcgplayerMockRecorder {
	return m.recorder
}

// GetCategories mocks base method.
func (m *MockTcgplayer) GetCategories() ([]*tcgplayer.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategories")
	ret0, _ := ret[0].([]*tcgplayer.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategories indicates an expected call of GetCategories.
func (mr *MockTcgplayerMockRecorder) GetCategories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategories", reflect.TypeOf((*MockTcgplayer)(nil).GetCategories))
}

// GetConditions mocks base method.
func (m *MockTcgplayer) GetConditions(params *tcgplayer.ConditionParams) ([]*tcgplayer.Condition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConditions", params)
	ret0, _ := ret[0].([]*tcgplayer.Condition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConditions indicates an expected call of GetConditions.
func (mr *MockTcgplayerMockRecorder) GetConditions(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConditions", reflect.TypeOf((*MockTcgplayer)(nil).GetConditions), params)
}

// GetGroups mocks base method.
func (m *MockTcgplayer) GetGroups(arg0 tcgplayer.GroupParams) ([]*tcgplayer.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups", arg0)
	ret0, _ := ret[0].([]*tcgplayer.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroups indicates an expected call of GetGroups.
func (mr *MockTcgplayerMockRecorder) GetGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*MockTcgplayer)(nil).GetGroups), arg0)
}

// GetLanguages mocks base method.
func (m *MockTcgplayer) GetLanguages(params *tcgplayer.LanguageParams) ([]*tcgplayer.Language, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLanguages", params)
	ret0, _ := ret[0].([]*tcgplayer.Language)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLanguages indicates an expected call of GetLanguages.
func (mr *MockTcgplayerMockRecorder) GetLanguages(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLanguages", reflect.TypeOf((*MockTcgplayer)(nil).GetLanguages), params)
}

// GetPrinting mocks base method.
func (m *MockTcgplayer) GetPrinting(params tcgplayer.PrintingParams) ([]*tcgplayer.Printing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrinting", params)
	ret0, _ := ret[0].([]*tcgplayer.Printing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrinting indicates an expected call of GetPrinting.
func (mr *MockTcgplayerMockRecorder) GetPrinting(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrinting", reflect.TypeOf((*MockTcgplayer)(nil).GetPrinting), params)
}

// GetRarities mocks base method.
func (m *MockTcgplayer) GetRarities(params *tcgplayer.RarityParams) ([]*tcgplayer.Rarity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRarities", params)
	ret0, _ := ret[0].([]*tcgplayer.Rarity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRarities indicates an expected call of GetRarities.
func (mr *MockTcgplayerMockRecorder) GetRarities(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRarities", reflect.TypeOf((*MockTcgplayer)(nil).GetRarities), params)
}

// GetSKUPrices mocks base method.
func (m *MockTcgplayer) GetSKUPrices(skus []int) ([]*tcgplayer.SKUMarketPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSKUPrices", skus)
	ret0, _ := ret[0].([]*tcgplayer.SKUMarketPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSKUPrices indicates an expected call of GetSKUPrices.
func (mr *MockTcgplayerMockRecorder) GetSKUPrices(skus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSKUPrices", reflect.TypeOf((*MockTcgplayer)(nil).GetSKUPrices), skus)
}

// ListAllProducts mocks base method.
func (m *MockTcgplayer) ListAllProducts(params tcgplayer.ProductParams) ([]*tcgplayer.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllProducts", params)
	ret0, _ := ret[0].([]*tcgplayer.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllProducts indicates an expected call of ListAllProducts.
func (mr *MockTcgplayerMockRecorder) ListAllProducts(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllProducts", reflect.TypeOf((*MockTcgplayer)(nil).ListAllProducts), params)
}

// ListProductSKUs mocks base method.
func (m *MockTcgplayer) ListProductSKUs(skuID int) ([]*tcgplayer.SKU, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductSKUs", skuID)
	ret0, _ := ret[0].([]*tcgplayer.SKU)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductSKUs indicates an expected call of ListProductSKUs.
func (mr *MockTcgplayerMockRecorder) ListProductSKUs(skuID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductSKUs", reflect.TypeOf((*MockTcgplayer)(nil).ListProductSKUs), skuID)
}
